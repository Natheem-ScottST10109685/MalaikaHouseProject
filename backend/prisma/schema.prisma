generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Audience {
  INTERNAL
  EXTERNAL
  BOTH
}

enum PublishStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PlanScope {
  ALL
  CLUB
  EVENT_TAG
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum PaymentStatus {
  PAID
  REFUNDED
  FAILED
  PENDING
}

enum PaymentMethod {
  EFT
  CARD
  CASH
  OTHER
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  passwordHash      String
  role              String   @default("PARENT")
  isActive          Boolean  @default(true)
  mustResetPassword Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  children      Child[]
  sessions      Session[]
  resetTokens   PasswordResetToken[]
  NewsPost      NewsPost[]
  Notification  Notification[]
  Subscription  Subscription[]
  StudentReport StudentReport[]
  payments      Payment[]
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
}

model Session {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshTokenHash String   @unique
  ip               String?
  userAgent        String?
  expiresAt        DateTime
  createdAt        DateTime @default(now())
}

model Notification {
  id        String    @id @default(cuid())
  title     String
  message   String
  severity  String    @default("info")
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())
  readAt    DateTime?
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])

  @@index([userId, isRead, createdAt])
}

model ActivityLog {
  id         String  @id @default(cuid())
  actorId    String?
  actorRole  String?
  actorEmail String?
  action     String
  targetType String?
  targetId   String?
  metadata   String?

  ip        String?
  userAgent String?
  status    String   @default("SUCCESS")
  createdAt DateTime @default(now())
}

model IntegrationCredential {
  id           String    @id @default(cuid())
  provider     String
  accountRef   String?
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?

  meta String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id            String          @id @default(cuid())
  title         String
  type          String
  startAt       DateTime
  endAt         DateTime
  location      String?
  facilitator   String?
  status        String          @default("Upcoming")
  audience      Audience        @default(BOTH)
  visibility    Visibility      @default(PUBLIC)
  publishStatus PublishStatus   @default(DRAFT)
  capacity      Int?
  price         Float?
  clubId        String?
  club          Club?           @relation(fields: [clubId], references: [id], onDelete: SetNull)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Appointment   Appointment[]
  StudentReport StudentReport[]

  @@index([startAt])
  @@index([clubId])
}

model Club {
  id               String             @id @default(cuid())
  name             String
  description      String?
  audience         Audience           @default(INTERNAL)
  tier             String?
  monthlyFee       Float?
  sessions         Int?
  active           Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  events           Event[]
  SubscriptionPlan SubscriptionPlan[]
}

enum NewsStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
}

model NewsPost {
  id        String     @id @default(cuid())
  title     String
  slug      String     @unique
  excerpt   String?
  content   String?
  status    NewsStatus @default(DRAFT)
  publishAt DateTime?
  authorId  String?
  author    User?      @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Child {
  id          String    @id @default(cuid())
  firstName   String
  lastName    String
  dateOfBirth DateTime?
  grade       String?
  notes       String?
  isActive    Boolean   @default(true)

  parentId String
  parent   User   @relation(fields: [parentId], references: [id])

  // add this line to relate appointments to a child:
  appointments Appointment[]

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  SubscriptionChild SubscriptionChild[]
  StudentReport     StudentReport[]
}

model Appointment {
  id      String @id @default(cuid())
  childId String
  child   Child  @relation(fields: [childId], references: [id], onDelete: Cascade)

  type     String
  location String?
  startAt  DateTime
  endAt    DateTime
  status   String   @default("Scheduled")
  notes    String?

  eventId String?
  event   Event?  @relation(fields: [eventId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([childId, startAt])
}

model SubscriptionPlan {
  id              String         @id @default(cuid())
  name            String
  description     String?
  price           Float
  period          String
  durationMonths  Int?
  maxChildren     Int?
  autoApplyEvents Boolean        @default(true)
  active          Boolean        @default(true)
  scope           PlanScope      @default(ALL)
  clubId          String?
  club            Club?          @relation(fields: [clubId], references: [id])
  eventTag        String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  subscriptions   Subscription[]

  @@index([active, scope])
}

model Subscription {
  id            String              @id @default(cuid())
  parentId      String
  parent        User                @relation(fields: [parentId], references: [id], onDelete: Cascade)
  planId        String
  plan          SubscriptionPlan    @relation(fields: [planId], references: [id])
  startDate     DateTime            @default(now())
  endDate       DateTime?
  status        String              @default("ACTIVE")
  cost          Float
  autoRenew     Boolean             @default(true)
  nextBillingAt DateTime?
  children      SubscriptionChild[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

model SubscriptionChild {
  id             String       @id @default(cuid())
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  childId        String
  child          Child        @relation(fields: [childId], references: [id])
}

model StudentReport {
  id          String   @id @default(cuid())
  childId     String
  eventId     String?
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  socialSkills   Int     @default(0)
  teamwork       Int     @default(0)
  participation  Int     @default(0)
  focus          Int     @default(0)
  creativity     Int     @default(0)
  effort         Int     @default(0)
  discipline     Int     @default(0)
  overallComment String?

  progressScore Float @default(0)

  child     Child  @relation(fields: [childId], references: [id])
  event     Event? @relation(fields: [eventId], references: [id])
  createdBy User   @relation(fields: [createdById], references: [id])
}

model Payment {
  id       String @id @default(cuid())
  parentId String
  parent   User   @relation(fields: [parentId], references: [id], onDelete: Cascade)

  amountCents Int // store cents to avoid float issues
  currency    String         @default("ZAR")
  status      PaymentStatus  @default(PAID)
  method      PaymentMethod?
  reference   String?        @unique
  notes       String?

  createdAt DateTime @default(now())

  @@index([parentId, createdAt])
}
