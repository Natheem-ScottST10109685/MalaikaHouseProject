generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  passwordHash      String
  role              String   @default("PARENT")
  isActive          Boolean  @default(true)
  mustResetPassword Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  children    Child[]
  sessions    Session[]
  resetTokens PasswordResetToken[]
  NewsPost    NewsPost[]
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
}

model Session {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshTokenHash String   @unique
  ip               String?
  userAgent        String?
  expiresAt        DateTime
  createdAt        DateTime @default(now())
}

model Notification {
  id        String    @id @default(cuid())
  title     String
  message   String
  severity  String    @default("info") // "info" | "warning" | "error"
  isRead    Boolean   @default(false) // global read flag (simple approach)
  createdAt DateTime  @default(now())
  readAt    DateTime?
}

model ActivityLog {
  id         String  @id @default(cuid())
  actorId    String?
  actorRole  String?
  actorEmail String?
  action     String
  targetType String?
  targetId   String?
  metadata   String?

  ip        String?
  userAgent String?
  status    String   @default("SUCCESS")
  createdAt DateTime @default(now())
}

model IntegrationCredential {
  id           String    @id @default(cuid())
  provider     String
  accountRef   String?
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?

  meta String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          String   @id @default(cuid())
  title       String
  type        String
  startAt     DateTime
  endAt       DateTime
  location    String?
  facilitator String?
  status      String   @default("Upcoming")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Club {
  id          String   @id @default(cuid())
  name        String
  description String?
  tier        String?
  monthlyFee  Float?
  sessions    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum NewsStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
}

model NewsPost {
  id        String     @id @default(cuid())
  title     String
  slug      String     @unique
  excerpt   String?
  content   String?
  status    NewsStatus @default(DRAFT)
  publishAt DateTime?
  authorId  String?
  author    User?      @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Child {
  id          String    @id @default(cuid())
  firstName   String
  lastName    String
  dateOfBirth DateTime?
  grade       String?
  notes       String?
  isActive    Boolean   @default(true)

  parentId String
  parent   User   @relation(fields: [parentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
