generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  passwordHash      String
  role              String   @default("PARENT")
  isActive          Boolean  @default(true)
  mustResetPassword Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  children    Child[]
  sessions    Session[]
  resetTokens PasswordResetToken[]
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
}

model Session {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshTokenHash String   @unique
  ip               String?
  userAgent        String?
  expiresAt        DateTime
  createdAt        DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  severity  String   @default("INFO") // "INFO" | "WARNING" | "ERROR"
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model ActivityLog {
  id         String  @id @default(cuid())
  actorId    String?
  actorRole  String?
  actorEmail String?
  action     String
  targetType String?
  targetId   String?
  metadata   String?

  ip        String?
  userAgent String?
  status    String   @default("SUCCESS")
  createdAt DateTime @default(now())
}

model IntegrationCredential {
  id           String    @id @default(cuid())
  provider     String
  accountRef   String?
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?

  meta String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Child {
  id        String    @id @default(cuid())
  firstName String
  lastName  String
  dob       DateTime?

  parentId String
  parent   User   @relation(fields: [parentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
